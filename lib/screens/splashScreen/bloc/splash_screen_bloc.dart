// splash_screen_bloc.dart - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö status ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞ token refresh
import 'dart:async';
import 'dart:io';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../api/splash_service.dart';
import 'splash_screen_event.dart';
import 'splash_screen_state.dart';

class SplashScreenBloc extends Bloc<SplashScreenEvent, SplashScreenState> {
  SplashScreenBloc() : super(SplashInitial()) {
    on<StartSplash>(_onStartSplash);
    on<RetryConnection>(_onRetryConnection);
  }

  // ‡∏´‡∏•‡∏±‡∏Å Flow: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
  Future<void> _onStartSplash(StartSplash event, Emitter<SplashScreenState> emit) async {
    try {
      // Step 1: ‡πÄ‡∏ä‡πá‡∏Ñ Network
      emit(SplashLoading('Checking network connection...'));
      if (!await _hasNetworkConnection()) {
        emit(NavigateToNetworkError());
        return;
      }

      // Step 2: ‡πÄ‡∏ä‡πá‡∏Ñ Token
      emit(SplashLoading('Checking authentication...'));
      final token = await _getStoredToken();

      if (token == null || token.isEmpty) {
        print('üìù No token found or empty token');
        await _showSplashMinimumTime();
        emit(NavigateToLogin());
        return;
      }

      // Step 3: Validate Token ‡∏Å‡∏±‡∏ö Server
      emit(SplashLoading('Validating token...'));
      final validationResult = await _validateTokenWithServer(token);

      await _showSplashMinimumTime();

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏≤‡∏° status
      switch (validationResult.status) {
        case 1: // SUCCESS
        // ‡∏ñ‡πâ‡∏≤ token ‡∏ñ‡∏π‡∏Å refresh ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token ‡πÉ‡∏´‡∏°‡πà
          if (validationResult.tokenRefreshed && validationResult.newToken != null) {
            await _saveToken(validationResult.newToken!);
            emit(SplashLoading('Token refreshed, proceeding to app...'));
            await Future.delayed(Duration(milliseconds: 500));
          }
          emit(NavigateToHome());
          break;

        case 2: // REFRESH_TOKEN_EXPIRED
        case 3: // REFRESH_TOKEN_NOT_FOUND
        // ‡∏ï‡πâ‡∏≠‡∏á login ‡πÉ‡∏´‡∏°‡πà
          await _clearStoredToken();
          emit(NavigateToLogin());
          break;

        case 4: // USER_NOT_FOUND
        case 5: // TOKEN_REVOKED
        case 6: // TOKEN_MISMATCH
        // Token ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏ï‡πâ‡∏≠‡∏á login ‡πÉ‡∏´‡∏°‡πà
          await _clearStoredToken();
          emit(NavigateToLogin());
          break;

        default: // ‡∏≠‡∏∑‡πà‡∏ô‡πÜ (7,8,10)
        // Server error ‡∏´‡∏£‡∏∑‡∏≠ network issue
          emit(SplashError(validationResult.message ?? 'Token validation failed'));
          break;
      }

    } catch (e) {
      emit(SplashError('Something went wrong: ${e.toString()}'));
    }
  }

  // Retry ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î Error
  Future<void> _onRetryConnection(RetryConnection event, Emitter<SplashScreenState> emit) async {
    emit(SplashInitial());
    add(StartSplash());
  }

  // ================== Helper Methods ==================

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ Internet ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  Future<bool> _hasNetworkConnection() async {
    try {
      final connectivityResult = await Connectivity().checkConnectivity();
      return connectivityResult.any((result) => result != ConnectivityResult.none);
    } catch (e) {
      return false;
    }
  }

  // ‡∏î‡∏∂‡∏á Token ‡∏à‡∏≤‡∏Å Storage
  Future<String?> _getStoredToken() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getString('jwt_token');
    } catch (e) {
      return null;
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Token ‡∏•‡∏á Storage
  Future<void> _saveToken(String token) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('jwt_token', token);
    } catch (e) {
      // Ignore error
    }
  }

  // ‡∏•‡∏ö Token ‡∏à‡∏≤‡∏Å Storage
  Future<void> _clearStoredToken() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove('jwt_token');
    } catch (e) {
      // Ignore error
    }
  }

  // Validate Token ‡∏Å‡∏±‡∏ö Server
  Future<TokenValidationResult> _validateTokenWithServer(String token) async {
    try {
      final response = await SplashService.validateToken(idToken: token)
          .timeout(Duration(seconds: 15)); // ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout

      if (response == null) {
        return TokenValidationResult(
            status: 10,
            success: false,
            message: '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå'
        );
      }

      // ‡πÄ‡∏ä‡πá‡∏Ñ HTTP status code ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
      switch (response.statusCode) {
        case 200:
          if (response.data != null) {
            final data = response.data!;
            return TokenValidationResult(
                status: data.status ?? 10,
                success: data.status == 1,
                message: data.message,
                newToken: data.accessToken,
                tokenRefreshed: data.tokenRefreshed ?? false
            );
          } else {
            return TokenValidationResult(
                status: 10,
                success: false,
                message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå'
            );
          }

        case 400:
          return TokenValidationResult(
              status: 10,
              success: false,
              message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
          );

        case 401:
          return TokenValidationResult(
              status: 10,
              success: false,
              message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
          );

        case 403:
          return TokenValidationResult(
              status: 10,
              success: false,
              message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
          );

        case 404:
          return TokenValidationResult(
              status: 10,
              success: false,
              message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£'
          );

        case 500:
          return TokenValidationResult(
              status: 10,
              success: false,
              message: '‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á'
          );

        case 502:
          return TokenValidationResult(
              status: 10,
              success: false,
              message: '‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
          );

        case 503:
          return TokenValidationResult(
              status: 10,
              success: false,
              message: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß'
          );

        case 504:
          return TokenValidationResult(
              status: 10,
              success: false,
              message: '‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ'
          );

        default:
          return TokenValidationResult(
              status: 10,
              success: false,
              message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ (${response.statusCode})'
          );
      }

    } on TimeoutException catch (e) {
      return TokenValidationResult(
          status: 10,
          success: false,
          message: '‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ä‡πâ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      );
    } on SocketException catch (e) {
      return TokenValidationResult(
          status: 10,
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÑ‡∏î‡πâ'
      );
    } on HttpException catch (e) {
      return TokenValidationResult(
          status: 10,
          success: false,
          message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'
      );
    } on FormatException catch (e) {
      return TokenValidationResult(
          status: 10,
          success: false,
          message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      );
    } catch (e) {
      return TokenValidationResult(
          status: 10,
          success: false,
          message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'
      );
    }
  }

  // ‡πÅ‡∏™‡∏î‡∏á Splash ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UX)
  Future<void> _showSplashMinimumTime() async {
    await Future.delayed(Duration(seconds: 2));
  }
}

// Helper class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå validation
class TokenValidationResult {
  final int status;
  final bool success;
  final String? message;
  final String? newToken;
  final bool tokenRefreshed;

  TokenValidationResult({
    required this.status,
    required this.success,
    this.message,
    this.newToken,
    this.tokenRefreshed = false,
  });
}
